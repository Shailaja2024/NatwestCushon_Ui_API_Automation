// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NatwestCushon_Automation_Test.APITest
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TokenBasedAuthenticationForAPI")]
    public partial class TokenBasedAuthenticationForAPIFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "APITest", "TokenBasedAuthenticationForAPI", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ApiTestingScenarios.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid and invalid authentication token")]
        [NUnit.Framework.CategoryAttribute("scenario_01")]
        [NUnit.Framework.CategoryAttribute("api")]
        public async System.Threading.Tasks.Task ValidAndInvalidAuthenticationToken()
        {
            string[] tagsOfScenario = new string[] {
                    "scenario_01",
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid and invalid authentication token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
 await testRunner.GivenAsync("the user have a valid token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
 await testRunner.WhenAsync("the user makes a Get request to \'/airports\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
 await testRunner.WhenAsync("the user send a Get request to \'/airports\' with an invalid token \'1234567\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync("the response status should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 11
 await testRunner.AndAsync("the response body should contain an error message \'Unauthorized\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Airports data and validation")]
        [NUnit.Framework.CategoryAttribute("Scenario_02")]
        [NUnit.Framework.CategoryAttribute("api")]
        public async System.Threading.Tasks.Task AirportsDataAndValidation()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario_02",
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Airports data and validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
 await testRunner.GivenAsync("the user have a valid token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
 await testRunner.WhenAsync("the user makes a Get request to \'/airports\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "List"});
                table1.AddRow(new string[] {
                            "Goroka Airport"});
                table1.AddRow(new string[] {
                            "Madang Airport"});
                table1.AddRow(new string[] {
                            "Brandon Municipal Airport"});
                table1.AddRow(new string[] {
                            "Cambridge Bay Airport"});
#line 18
 await testRunner.AndAsync("the response should contain a list of airports", ((string)(null)), table1, "And ");
#line hidden
#line 24
 await testRunner.WhenAsync("the user makes a Get request to \'/airports/MAG\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Keys",
                            "Values"});
                table2.AddRow(new string[] {
                            "city",
                            "Madang"});
                table2.AddRow(new string[] {
                            "country",
                            "Papua New Guinea"});
                table2.AddRow(new string[] {
                            "timezone",
                            "Pacific/Port_Moresby"});
#line 26
 await testRunner.AndAsync("the response body should contain below details", ((string)(null)), table2, "And ");
#line hidden
#line 31
 await testRunner.WhenAsync("the  user sends a POST request to \'/airports/distance\' find distance between airp" +
                        "ort codes \'KIX\' and \'GKA\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table3.AddRow(new string[] {
                            "kilometers",
                            "4628.82980331026"});
#line 33
 await testRunner.ThenAsync("the response should contain the distance between airports", ((string)(null)), table3, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Favourites and Validations")]
        [NUnit.Framework.CategoryAttribute("Scenario_03")]
        [NUnit.Framework.CategoryAttribute("api")]
        public async System.Threading.Tasks.Task FavouritesAndValidations()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario_03",
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Favourites and Validations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 39
 await testRunner.GivenAsync("the user have a valid token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 40
 await testRunner.WhenAsync("the user makes a Post request to \'/favorites\' with id \'GOH\' and note \'A very good" +
                        " airport\' parameters", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
 await testRunner.WhenAsync("the user makes a Get request to \'/favorites\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Keys",
                            "Values"});
                table4.AddRow(new string[] {
                            "note",
                            "A very good airport"});
#line 44
 await testRunner.AndAsync("the response body should contain below details", ((string)(null)), table4, "And ");
#line hidden
#line 47
 await testRunner.WhenAsync("user makes a Patch request to \'/favorites/\' update with id \'GOH\' and the notes as" +
                        " \'Its my first favorites\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 49
 await testRunner.WhenAsync("user makes a Delete request to remove the \'/favorites/\' along with id", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
 await testRunner.ThenAsync("the response status should be 204", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
 await testRunner.WhenAsync("the user makes a Post request to \'/favorites\' with id \'UAK\' and note \'A very good" +
                        " airport\' parameters", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
 await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
 await testRunner.WhenAsync("the user makes a Get request to \'/favorites/\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
 await testRunner.WhenAsync("user makes a Delete request to \'/favorites/clear_all\' to remove all favourites", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
 await testRunner.ThenAsync("the response status should be 204", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
