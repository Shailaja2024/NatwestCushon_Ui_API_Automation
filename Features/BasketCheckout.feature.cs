// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NatwestCushon_Automation_Test.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BasketCheckout")]
    public partial class BasketCheckoutFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BasketCheckout", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "BasketCheckout.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout functionality")]
        [NUnit.Framework.CategoryAttribute("Scenario_01")]
        public async System.Threading.Tasks.Task CheckoutFunctionality()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario_01"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Checkout functionality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
 await testRunner.GivenAsync("the user is on the sweet shop home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
 await testRunner.ThenAsync("the user should be able to see the title \'Welcome to the sweet shop!\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 8
 await testRunner.WhenAsync("the user clicks the \'Add to Basket\' button for a sweet \'Chocolate Cups\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync("the user should be able to see the basket 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
 await testRunner.WhenAsync("the user navigates to the \'Basket\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("the user should be able to see the valid \'Your Basket\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
 await testRunner.ThenAsync("the user should be albe to see the your basket is 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "First name",
                            "ABCDEF"});
                table5.AddRow(new string[] {
                            "Last name",
                            "GHIJK"});
                table5.AddRow(new string[] {
                            "Email",
                            "test@example.com"});
                table5.AddRow(new string[] {
                            "Address",
                            "1234 Main st"});
                table5.AddRow(new string[] {
                            "Zip",
                            "1234"});
#line 13
 await testRunner.WhenAsync("the user enters details to billing adress", ((string)(null)), table5, "When ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Dropdown",
                            "Value"});
                table6.AddRow(new string[] {
                            "Country",
                            "United Kingdom"});
                table6.AddRow(new string[] {
                            "City",
                            "Bristol"});
#line 20
 await testRunner.WhenAsync("the user selects an option from the below dripdowns", ((string)(null)), table6, "When ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "Name on card",
                            "ABED"});
                table7.AddRow(new string[] {
                            "Credit card number",
                            "123123"});
                table7.AddRow(new string[] {
                            "Expiration",
                            "1226"});
                table7.AddRow(new string[] {
                            "CVV",
                            "213"});
#line 24
 await testRunner.WhenAsync("the user enters details to Payment", ((string)(null)), table7, "When ");
#line hidden
#line 30
 await testRunner.WhenAsync("the user click on the \'Continue to checkout\' button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
 await testRunner.ThenAsync("the user should be albe to see the your basket is 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
